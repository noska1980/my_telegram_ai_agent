# plan_handlers.py
import datetime
import re
import aiosqlite
import pytz
from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.markdown import hbold, hstrikethrough
from aiogram.filters import StateFilter

from config import DB_NAME, USER_TIMEZONE_STR, logger
from db import add_plan_to_db, get_all_user_plans, get_plan_by_id, get_plans_for_date, get_attachments_for_plan
from scheduler_jobs import scheduler, send_reminder_job
from filters import IsAuthorizedUser
from keyboards import get_plans_keyboard, get_main_keyboard, get_date_keyboard

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---
class AddPlanStates(StatesGroup):
    awaiting_date = State()
    awaiting_topic = State()
    awaiting_plan_content = State()
    awaiting_reminder_time = State()

class EditPlanStates(StatesGroup):
    awaiting_id = State()
    choosing_edit_field = State()
    editing_text = State()
    editing_date = State()
    editing_topic = State()

class DeletePlanStates(StatesGroup):
    awaiting_ids = State()

class CompletePlanStates(StatesGroup):
    awaiting_ids = State()

class SetReminderStates(StatesGroup):
    awaiting_id = State()
    awaiting_time = State()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ú–ï–ù–Æ –ü–õ–ê–ù–û–í ---

async def handle_add_plan_button(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞—Ç—É."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ '–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω ‚ûï' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω? –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–µ–≥–æ–¥–Ω—è':", reply_markup=get_date_keyboard())
    await state.set_state(AddPlanStates.awaiting_date)

async def handle_today_plans_button(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    from telegram_handlers import display_multiple_plans
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ '–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚òÄÔ∏è' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user_id = message.from_user.id
    today_date_str = datetime.date.today().strftime("%Y-%m-%d")
    plans = await get_plans_for_date(user_id, today_date_str)
    if not plans:
        await message.answer(f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.date.today().strftime('%d.%m.%Y –≥.')}) –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç.", reply_markup=get_plans_keyboard())
        return
    today_display_date = datetime.date.today().strftime("%d.%m.%Y –≥.")
    await display_multiple_plans(message, plans, f"–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({hbold(today_display_date)}):")
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_plans_keyboard())

async def handle_all_plans_button(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from telegram_handlers import display_multiple_plans
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ '–í—Å–µ –ø–ª–∞–Ω—ã üìù' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user_id = message.from_user.id
    plans = await get_all_user_plans(user_id)
    if not plans:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤.", reply_markup=get_plans_keyboard())
        return
    await display_multiple_plans(message, plans, "–í—Å–µ –≤–∞—à–∏ –ø–ª–∞–Ω—ã:")
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_plans_keyboard())

async def handle_edit_plan_button(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω ‚úèÔ∏è' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditPlanStates.awaiting_id)

async def handle_delete_plan_button(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ '–£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω üóëÔ∏è' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞–Ω–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DeletePlanStates.awaiting_ids)

async def handle_complete_plan_button(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω ‚úÖ' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞–Ω–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö) –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CompletePlanStates.awaiting_ids)

async def handle_set_reminder_button(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞–Ω–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SetReminderStates.awaiting_id)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô (FSM) ---

async def add_plan_date_received(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–º—É –ø–ª–∞–Ω–∞."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞ –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    date_str = message.text.strip()
    try:
        if date_str.lower() == '—Å–µ–≥–æ–¥–Ω—è':
            date_obj = datetime.datetime.now()
            logger.info("–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ.")
        else:
            date_obj = datetime.datetime.strptime(date_str, "%d.%m.%Y")

        db_date_str = date_obj.strftime("%Y-%m-%d")
        display_date_str = date_obj.strftime("%d.%m.%Y –≥.")
        await state.update_data(plan_date_db=db_date_str, display_date=display_date_str)
        await message.answer(f"–î–∞—Ç–∞ {display_date_str}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–ª–∞–Ω–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(AddPlanStates.awaiting_topic)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–µ–≥–æ–¥–Ω—è'.", reply_markup=get_date_keyboard())


async def add_plan_topic_received(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ç–µ–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω–∞."""
    topic_text = message.text.strip()
    if not topic_text:
        await message.answer("–¢–µ–º–∞ –ø–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É:", reply_markup=get_plans_keyboard())
        return
    await state.update_data(plan_topic=topic_text)
    display_date = (await state.get_data()).get('display_date')
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–∞ –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: '{topic_text}'")
    await message.answer(f"–¢–µ–º–∞: ¬´{topic_text}¬ª. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞, "
                         f"–∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/—Ñ–æ—Ç–æ –∫ –ø–ª–∞–Ω—É:")
    await state.set_state(AddPlanStates.awaiting_plan_content)

async def add_plan_content_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    user_data = await state.get_data()
    display_date = user_data.get('display_date')
    user_id = message.from_user.id

    plan_text = ""
    telegram_file_id = None
    file_type = None

    if message.text:
        plan_text = message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{plan_text}'")
    elif message.photo:
        photo = message.photo[-1]
        telegram_file_id = photo.file_id
        file_type = "photo"
        plan_text = message.caption or f"–§–æ—Ç–æ –∫ –ø–ª–∞–Ω—É –æ—Ç {display_date}"
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ID {telegram_file_id}")
    elif message.voice:
        voice = message.voice
        telegram_file_id = voice.file_id
        file_type = "voice"
        plan_text = message.caption or f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–ª–∞–Ω—É –æ—Ç {display_date}"
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ID {telegram_file_id}")
    else:
        await message.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=get_plans_keyboard())
        await state.clear()
        return

    if not plan_text and not telegram_file_id:
        await message.answer("–¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=get_plans_keyboard())
        await state.clear()
        return

    await state.update_data(plan_text=plan_text, telegram_file_id=telegram_file_id, file_type=file_type)

    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–ª–∞–Ω–µ? –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:30). –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'.")
    await state.set_state(AddPlanStates.awaiting_reminder_time)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def add_plan_reminder_time_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user_data = await state.get_data()
    plan_date_db = user_data.get('plan_date_db')
    display_date = user_data.get('display_date')
    plan_topic = user_data.get('plan_topic')
    plan_text = user_data.get('plan_text')
    telegram_file_id = user_data.get('telegram_file_id')
    file_type = user_data.get('file_type')
    user_id = message.from_user.id

    reminder_time_str = message.text.strip().lower()
    reminder_datetime_db = None
    
    if reminder_time_str != '–Ω–µ—Ç':
        match = re.search(r'\d{1,2}:\d{2}', reminder_time_str)
        if not match:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:30), –∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.", reply_markup=get_plans_keyboard())
            await state.clear()
            return
        
        try:
            tz = pytz.timezone(USER_TIMEZONE_STR)
            dt_naive = datetime.datetime.combine(datetime.datetime.strptime(plan_date_db, "%Y-%m-%d").date(), datetime.datetime.strptime(match.group(0), "%H:%M").time())
            dt_aware = tz.localize(dt_naive)
            
            if dt_aware <= datetime.datetime.now(tz):
                await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ '–Ω–µ—Ç'.", reply_markup=get_plans_keyboard())
                await state.clear()
                return
            
            reminder_datetime_db = dt_naive.strftime("%Y-%m-%d %H:%M:%S")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}", exc_info=True)
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ '–Ω–µ—Ç'.", reply_markup=get_plans_keyboard())
            await state.clear()
            return
    
    plan_id = await add_plan_to_db(user_id, plan_date_db, plan_topic, plan_text, reminder_datetime=reminder_datetime_db)

    if telegram_file_id:
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute(
                "INSERT INTO user_files (user_id, telegram_file_id, original_file_name, file_type, plan_id) VALUES (?, ?, ?, ?, ?)",
                (user_id, telegram_file_id, f"plan_attachment_{plan_id}.{file_type}", file_type, plan_id)
            )
            await db.commit()
        await message.answer(f"‚úÖ –ü–ª–∞–Ω —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º ¬´{plan_topic}¬ª –Ω–∞ {display_date} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {plan_id}).", reply_markup=get_plans_keyboard(), parse_mode="HTML")
    else:
        await message.answer(f"‚úÖ –ü–ª–∞–Ω ¬´{plan_topic}¬ª –Ω–∞ {display_date} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {plan_id}).", reply_markup=get_plans_keyboard(), parse_mode="HTML")

    if reminder_datetime_db:
        tz = pytz.timezone(USER_TIMEZONE_STR)
        dt_naive = datetime.datetime.strptime(reminder_datetime_db, "%Y-%m-%d %H:%M:%S")
        dt_aware = tz.localize(dt_naive)
        
        job_id = f"reminder_{user_id}_{plan_id}"
        scheduler.add_job(
            send_reminder_job,
            trigger='date',
            run_date=dt_aware,
            args=[user_id, plan_id, plan_topic, plan_text, telegram_file_id, file_type],
            id=job_id,
            replace_existing=True
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ ID {plan_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt_aware.strftime('%H:%M')}.")
    
    await state.clear()

async def edit_plan_id_received(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –ø–ª–∞–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_plans_keyboard())
        await state.clear()
        return
    plan = await get_plan_by_id(message.from_user.id, int(message.text))
    if not plan:
        await message.answer(f"–ü–ª–∞–Ω —Å ID {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_plans_keyboard())
        await state.clear()
        return
    await state.update_data(
        plan_id=plan['id'],
        plan_text=plan['plan_text'],
        plan_date=plan['plan_date'],
        plan_topic=plan['plan_topic']
    )
    display_date = datetime.datetime.strptime(plan['plan_date'], "%Y-%m-%d").strftime("%d.%m.%Y –≥.")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data="edit:text"),
         InlineKeyboardButton(text="üìñ –¢–µ–º–∞", callback_data="edit:topic")],
        [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data="edit:date"),
         InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="edit:reminder")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit:cancel")]
    ])
    await message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ ID {plan['id']}:\n"
        f"**–¢–µ–º–∞:** {plan['plan_topic']}\n"
        f"**–¢–µ–∫—Å—Ç:** {plan['plan_text']}\n"
        f"**–î–∞—Ç–∞:** {display_date}\n\n–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=keyboard, parse_mode="Markdown"
    )
    await state.set_state(EditPlanStates.choosing_edit_field)

async def choose_edit_field(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    await callback.message.edit_reply_markup(reply_markup=None)
    user_data = await state.get_data()
    plan_id = user_data.get('plan_id')
    
    if action == "text":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        await state.set_state(EditPlanStates.editing_text)
    elif action == "date":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(EditPlanStates.editing_date)
    elif action == "topic":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:")
        await state.set_state(EditPlanStates.editing_topic)
    elif action == "reminder":
        attachments = await get_attachments_for_plan(plan_id)
        telegram_file_id = attachments[0]['telegram_file_id'] if attachments else None
        file_type = attachments[0]['file_type'] if attachments else None
        
        await state.update_data(
            telegram_file_id=telegram_file_id,
            file_type=file_type
        )
            
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ß–ß:–ú–ú) –∏–ª–∏ '–Ω–µ—Ç', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(SetReminderStates.awaiting_time)
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_plans_keyboard())
        await state.clear()
    await callback.answer()

async def update_plan_text(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    data = await state.get_data()
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE plans SET plan_text = ? WHERE id = ?", (message.text, data['plan_id']))
        await db.commit()
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ ID {data['plan_id']} –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_plans_keyboard())
    await state.clear()

async def update_plan_date(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–ª–∞–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    data = await state.get_data()
    try:
        db_date = datetime.datetime.strptime(message.text, "%d.%m.%Y").strftime("%Y-%m-%d")
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute("UPDATE plans SET plan_date = ? WHERE id = ?", (db_date, data['plan_id']))
            await db.commit()
        await message.answer(f"‚úÖ –î–∞—Ç–∞ –ø–ª–∞–Ω–∞ ID {data['plan_id']} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_plans_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_plans_keyboard())

async def update_plan_topic(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞ –ø–ª–∞–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    data = await state.get_data()
    new_topic = message.text.strip()
    if not new_topic:
        await message.answer("–¢–µ–º–∞ –ø–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_plans_keyboard())
        return
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE plans SET plan_topic = ? WHERE id = ?", (new_topic, data['plan_id']))
        await db.commit()
    await message.answer(f"‚úÖ –¢–µ–º–∞ –ø–ª–∞–Ω–∞ ID {data['plan_id']} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ¬´{new_topic}¬ª.", reply_markup=get_plans_keyboard())
    await state.clear()

async def set_reminder_time_received(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    data = await state.get_data()
    
    plan_id = data.get('plan_id')
    user_id = message.from_user.id
    plan_text = data.get('plan_text')
    plan_topic = data.get('plan_topic')
    telegram_file_id = data.get('telegram_file_id')
    file_type = data.get('file_type')

    time_str = message.text.strip().lower()
    reminder_datetime_db = None
    
    if time_str != '–Ω–µ—Ç':
        match = re.search(r'\d{1,2}:\d{2}', time_str)
        if not match:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:30), –∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.", reply_markup=get_plans_keyboard())
            await state.clear()
            return
        
        try:
            tz = pytz.timezone(USER_TIMEZONE_STR)
            plan_date_str = data.get('plan_date_db') or data.get('plan_date')
            dt_naive = datetime.datetime.combine(datetime.datetime.strptime(plan_date_str, "%Y-%m-%d").date(), datetime.datetime.strptime(match.group(0), "%H:%M").time())
            dt_aware = tz.localize(dt_naive)
            
            if dt_aware <= datetime.datetime.now(tz):
                await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ '–Ω–µ—Ç'.", reply_markup=get_plans_keyboard())
                await state.clear()
                return
            
            reminder_datetime_db = dt_naive.strftime("%Y-%m-%d %H:%M:%S")
            job_id = f"reminder_{user_id}_{plan_id}"
            scheduler.add_job(
                send_reminder_job,
                trigger='date',
                run_date=dt_aware,
                args=[user_id, plan_id, plan_topic, plan_text, telegram_file_id, file_type],
                id=job_id,
                replace_existing=True
            )
            await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt_aware.strftime('%H:%M')}.", reply_markup=get_plans_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}", exc_info=True)
            await message.answer("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=get_plans_keyboard())
            await state.clear()
            return
    else:
        job_id = f"reminder_{user_id}_{plan_id}"
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ ID {plan_id} —É–¥–∞–ª–µ–Ω–æ.")
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ ID {plan_id} —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_plans_keyboard())

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE plans SET reminder_datetime = ? WHERE id = ?", (reminder_datetime_db, plan_id))
        await db.commit()
    await state.clear()

async def delete_plans_ids_received(message: types.Message, state: FSMContext):
    from telegram_handlers import display_multiple_plans
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    ids = [int(pid) for pid in re.split(r'[,\s]+', message.text) if pid.isdigit()]
    if not ids:
        await message.answer("ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID.", reply_markup=get_plans_keyboard())
        await state.clear()
        return
    deleted_count = 0
    async with aiosqlite.connect(DB_NAME) as db:
        for plan_id in ids:
            cursor = await db.execute("DELETE FROM plans WHERE id = ? AND user_id = ?", (plan_id, message.from_user.id))
            if cursor.rowcount > 0:
                deleted_count += 1
                await db.execute("DELETE FROM user_files WHERE plan_id = ?", (plan_id,))
                if scheduler.get_job(f"reminder_{message.from_user.id}_{plan_id}"):
                    scheduler.remove_job(f"reminder_{message.from_user.id}_{plan_id}")
        await db.commit()
    await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {deleted_count}.", reply_markup=get_plans_keyboard())
    all_plans = await get_all_user_plans(message.from_user.id)
    if all_plans:
        await display_multiple_plans(message, all_plans, "–í—Å–µ –≤–∞—à–∏ –ø–ª–∞–Ω—ã:")
    await state.clear()

async def complete_plans_ids_received(message: types.Message, state: FSMContext):
    from telegram_handlers import display_multiple_plans
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã ID –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    ids = [int(pid) for pid in re.split(r'[,\s]+', message.text) if pid.isdigit()]
    if not ids:
        await message.answer("ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID.", reply_markup=get_plans_keyboard())
        await state.clear()
        return
    updated_count = 0
    async with aiosqlite.connect(DB_NAME) as db:
        for plan_id in ids:
            cursor = await db.execute("UPDATE plans SET is_completed = 1 - is_completed WHERE id = ? AND user_id = ?", (plan_id, message.from_user.id))
            if cursor.rowcount > 0: updated_count += 1
        await db.commit()
    await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {updated_count} –ø–ª–∞–Ω–æ–≤.", reply_markup=get_plans_keyboard())
    all_plans = await get_all_user_plans(message.from_user.id)
    if all_plans:
        await display_multiple_plans(message, all_plans, "–í—Å–µ –≤–∞—à–∏ –ø–ª–∞–Ω—ã:")
    await state.clear()

async def set_reminder_id_received(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –ø–ª–∞–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_plans_keyboard())
        await state.clear()
        return
    plan = await get_plan_by_id(message.from_user.id, int(message.text))
    if not plan:
        await message.answer(f"–ü–ª–∞–Ω —Å ID {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_plans_keyboard())
        await state.clear()
        return
    
    display_date = datetime.datetime.strptime(plan['plan_date'], "%Y-%m-%d").strftime("%d.%m.%Y –≥.")
    attachments = await get_attachments_for_plan(plan['id'])
    telegram_file_id = attachments[0]['telegram_file_id'] if attachments else None
    file_type = attachments[0]['file_type'] if attachments else None
    
    await state.update_data(
        plan_id=plan['id'], 
        plan_text=plan['plan_text'], 
        plan_date=plan['plan_date'],
        plan_topic=plan['plan_topic'],
        telegram_file_id=telegram_file_id,
        file_type=file_type
    )
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ ID {plan['id']}:\n**–¢–µ–º–∞:** {plan['plan_topic']}\n**–¢–µ–∫—Å—Ç:** {plan['plan_text']}\n**–î–∞—Ç–∞:** {display_date}\n\n–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å (–ß–ß:–ú–ú)?", parse_mode="Markdown")
    await state.set_state(SetReminderStates.awaiting_time)